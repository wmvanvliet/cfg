***************************************************************************

IPython post-mortem report

{'commit_hash': '<not found>',
 'commit_source': '(none found)',
 'ipython_path': '/Library/Frameworks/EPD64.framework/Versions/7.1/lib/python2.7/site-packages/IPython',
 'ipython_version': '0.11.rc1',
 'os_name': 'posix',
 'platform': 'Darwin-11.2.0-x86_64-i386-64bit',
 'sys_executable': '/Library/Frameworks/EPD64.framework/Versions/7.1/bin/python',
 'sys_platform': 'darwin',
 'sys_version': '2.7.2 |EPD 7.1-1 (64-bit)| (default, Jul  3 2011, 15:56:02) \n[GCC 4.0.1 (Apple Inc. build 5493)]'}

***************************************************************************



***************************************************************************

Crash traceback:

---------------------------------------------------------------------------
TypeErrorPython 2.7.2: /Library/Frameworks/EPD64.framework/Versions/7.1/bin/python
                                                   Fri Nov 25 16:31:20 2011
A problem occured executing Python code.  Here is the sequence of function
calls leading up to the error, with the most recent (innermost) call last.
/Library/Frameworks/EPD64.framework/Versions/7.1/lib/python2.7/site-packages/matplotlib/backend_bases.py in motion_notify_event(self=FigureCanvas object 0x10a963a28 wrapping NSView 0x10b29aa90, x=580, y=48, guiEvent=None)
   1610         *y*
   1611             the canvas coordinates where 0=bottom
   1612 
   1613         *guiEvent*
   1614             the native UI event that generated the mpl event
   1615 
   1616 
   1617         This method will be call all functions connected to the
   1618         'motion_notify_event' with a :class:`MouseEvent` instance.
   1619 
   1620         """
   1621         self._lastx, self._lasty = x, y
   1622         s = 'motion_notify_event'
   1623         event = MouseEvent(s, self, x, y, self._button, self._key,
   1624                            guiEvent=guiEvent)
-> 1625         self.callbacks.process(s, event)
        self.callbacks.process = <bound method CallbackRegistry.process of <matplotlib.cbook.CallbackRegistry instance at 0x10a963518>>
        s = 'motion_notify_event'
        event = <matplotlib.backend_bases.MouseEvent instance at 0x103e1f950>
   1626 
   1627     def leave_notify_event(self, guiEvent=None):
   1628         """
   1629         Backend derived classes should call this function when leaving
   1630         canvas
   1631 
   1632         *guiEvent*
   1633             the native UI event that generated the mpl event
   1634 
   1635         """
   1636         self.callbacks.process('figure_leave_event', LocationEvent.lastevent)
   1637         LocationEvent.lastevent = None
   1638 
   1639     def enter_notify_event(self, guiEvent=None):
   1640         """

/Library/Frameworks/EPD64.framework/Versions/7.1/lib/python2.7/site-packages/matplotlib/cbook.py in process(self=<matplotlib.cbook.CallbackRegistry instance>, s='motion_notify_event', *args=(<matplotlib.backend_bases.MouseEvent instance>,), **kwargs={})
    250                 continue
    251             else:
    252                 return
    253 
    254     def process(self, s, *args, **kwargs):
    255         """
    256         process signal *s*.  All of the functions registered to receive
    257         callbacks on *s* will be called with *\*args* and *\*\*kwargs*
    258         """
    259         self._check_signal(s)
    260         for cid, proxy in self.callbacks[s].items():
    261             # Clean out dead references
    262             if proxy.inst is not None and proxy.inst() is None:
    263                 del self.callbacks[s][cid]
    264             else:
--> 265                 proxy(*args, **kwargs)
        proxy = <matplotlib.cbook.BoundMethodProxy object at 0x10db1da50>
        args = (<matplotlib.backend_bases.MouseEvent instance at 0x103e1f950>,)
        kwargs = {}
    266 
    267 
    268 class Scheduler(threading.Thread):
    269     """
    270     Base class for timeout and idle scheduling
    271     """
    272     idlelock = threading.Lock()
    273     id = 0
    274 
    275     def __init__(self):
    276         threading.Thread.__init__(self)
    277         self.id = Scheduler.id
    278         self._stopped = False
    279         Scheduler.id += 1
    280         self._stopevent = threading.Event()

/Library/Frameworks/EPD64.framework/Versions/7.1/lib/python2.7/site-packages/matplotlib/cbook.py in __call__(self=<matplotlib.cbook.BoundMethodProxy object>, *args=(<matplotlib.backend_bases.MouseEvent instance>,), **kwargs={})
    176             Proxy for a call to the weak referenced object. Take
    177             arbitrary params to pass to the callable.
    178 
    179             Raises `ReferenceError`: When the weak reference refers to
    180             a dead object
    181             '''
    182             if self.inst is not None and self.inst() is None:
    183                 raise ReferenceError
    184             elif self.inst is not None:
    185                 # build a new instance method with a strong reference to the instance
    186                 mtd = new.instancemethod(self.func, self.inst(), self.klass)
    187             else:
    188                 # not a bound method, just return the func
    189                 mtd = self.func
    190             # invoke the callable and return the result
--> 191             return mtd(*args, **kwargs)
        mtd = <bound method NavigationToolbar2Mac.drag_zoom of NavigationToolbar2 object 0x10e050c00>
        args = (<matplotlib.backend_bases.MouseEvent instance at 0x103e1f950>,)
        kwargs = {}
    192 
    193         def __eq__(self, other):
    194             '''
    195             Compare the held function and instance with that held by
    196             another proxy.
    197             '''
    198             try:
    199                 if self.inst is None:
    200                     return self.func == other.func and other.inst is None
    201                 else:
    202                     return self.func == other.func and self.inst() == other.inst()
    203             except Exception:
    204                 return False
    205 
    206         def __ne__(self, other):

/Library/Frameworks/EPD64.framework/Versions/7.1/lib/python2.7/site-packages/matplotlib/backend_bases.py in drag_zoom(self=NavigationToolbar2 object 0x10e050c00, event=<matplotlib.backend_bases.MouseEvent instance>)
   2558             x, y = event.x, event.y
   2559             lastx, lasty, a, ind, lim, trans = self._xypress[0]
   2560 
   2561             # adjust x, last, y, last
   2562             x1, y1, x2, y2 = a.bbox.extents
   2563             x, lastx = max(min(x, lastx), x1), min(max(x, lastx), x2)
   2564             y, lasty = max(min(y, lasty), y1), min(max(y, lasty), y2)
   2565 
   2566             if self._zoom_mode == "x":
   2567                 x1, y1, x2, y2 = a.bbox.extents
   2568                 y, lasty = y1, y2
   2569             elif self._zoom_mode == "y":
   2570                 x1, y1, x2, y2 = a.bbox.extents
   2571                 x, lastx = x1, x2
   2572 
-> 2573             self.draw_rubberband(event, x, y, lastx, lasty)
        self.draw_rubberband = <bound method NavigationToolbar2Mac.draw_rubberband of NavigationToolbar2 object 0x10e050c00>
        event = <matplotlib.backend_bases.MouseEvent instance at 0x103e1f950>
        x = 81
        y = 48
        lastx = 576.0
        lasty = 123
   2574 
   2575 
   2576 
   2577     def release_zoom(self, event):
   2578         'the release mouse button callback in zoom to rect mode'
   2579         for zoom_id in self._ids_zoom:
   2580             self.canvas.mpl_disconnect(zoom_id)
   2581         self._ids_zoom = []
   2582 
   2583         if not self._xypress: return
   2584 
   2585         last_a = []
   2586 
   2587         for cur_xypress in self._xypress:
   2588             x, y = event.x, event.y

/Library/Frameworks/EPD64.framework/Versions/7.1/lib/python2.7/site-packages/matplotlib/backends/backend_macosx.py in draw_rubberband(self=NavigationToolbar2 object 0x10e050c00, event=<matplotlib.backend_bases.MouseEvent instance>, x0=81, y0=48, x1=576.0, y1=123)
    405         filename = _macosx.choose_save_file('Save the figure')
    406         if filename is None: # Cancel
    407             return
    408         self.canvas.print_figure(filename)
    409 
    410 class NavigationToolbar2Mac(_macosx.NavigationToolbar2, NavigationToolbar2):
    411 
    412     def __init__(self, canvas):
    413         NavigationToolbar2.__init__(self, canvas)
    414 
    415     def _init_toolbar(self):
    416         basedir = os.path.join(matplotlib.rcParams['datapath'], "images")
    417         _macosx.NavigationToolbar2.__init__(self, basedir)
    418 
    419     def draw_rubberband(self, event, x0, y0, x1, y1):
--> 420         self.canvas.set_rubberband(x0, y0, x1, y1)
        self.canvas.set_rubberband = <built-in method set_rubberband of FigureCanvasMac object at 0x10a963a28>
        x0 = 81
        y0 = 48
        x1 = 576.0
        y1 = 123
    421 
    422     def release(self, event):
    423         self.canvas.remove_rubberband()
    424 
    425     def set_cursor(self, cursor):
    426         _macosx.set_cursor(cursor)
    427 
    428     def save_figure(self, *args):
    429         filename = _macosx.choose_save_file('Save the figure')
    430         if filename is None: # Cancel
    431             return
    432         self.canvas.print_figure(filename)
    433 
    434     def prepare_configure_subplots(self):
    435         toolfig = Figure(figsize=(6,3))

TypeError: integer argument expected, got float

***************************************************************************

History of session input:d = psychic.load_bdf('Subject8-IMEC.bdf')dspecgram(d.X[0,:])s = psychic.spectrogram(d.X[0,:])get_ipython().magic(u"pinfo psychic.spectrogram")s = psychic.spectrogram(d.X[0,:], 256, 1)import matplotlibs = matplotlib.mlab.specgram(d.X[0,:])simshow(s[0])imshow(s[0])Pxx, freqs, bins = matplotlib.mlab.specgram(d.X[0,:])Z = 10. * np.log10(Pxx)Z = np.flipud(Z)imshow(Z)Pxx, freqs, bins = matplotlib.mlab.specgram(d.X[0,:])imshow(np.log(Z))imshow(np.log10(Z))imshow(10. * np.log10(Z))imshow(10. * np.log10(Z))imshow(np.log(Pxx))get_ipython().magic(u"pinfo np.amax")Pxx.sizePxx.shapeimshow(np.log(Pxx), extend=(0, 10, 0, 10)
)imshow(np.log(Pxx), extent=(0, 10, 0, 10))freqsget_ipython().magic(u"pinfo matplotlib.mlab.specgram")Pxx, freqs, bins = matplotlib.mlab.specgram(d.X[0,:], Fs=1000)freqsPxx, freqs, bins = matplotlib.mlab.specgram(d.X[0,:], Fs=psychic.get_samplerate(d))freqsimshow(np.log(Pxx), extent=(0, np.amax(bins), freqs[0], freqs[-1]))imshow(np.flipud(np.log(Pxx)), extent=(0, np.amax(bins), freqs[0], freqs[-1]))imshow(np.flipud(np.log(Pxx)), extent=(0, np.amax(bins), freqs[0], freqs[-1]))figure()plot(d.Y)plot(d.Y.T)plot(d.Y.T)flatnonzero(d.Y[0,:])flatnonzero(d.Y[0,:])[:10]d2 = d[92309:92313]plot(d2.Y.T)flatnonzero(np.diff(d.Y[0,:]))[:10]d2 = d[92308:37390]plot(d2.Y.T)d2 = d[92308:137390]plot(d2.Y.T)specgram(d2, Fs=1000)specgram(d2.X[0,:], Fs=1000)specgram(d2.X[4,:], Fs=1000)
*** Last line of input (may not be in above history):
specgram(d2.X[4,:], Fs=1000)
